install.packages("slidify")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library(swirl)
swirl()
getwd()
ls()
x <-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.creat(testdir)
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R","folder1","folder2")
file.path(folder1","folder2")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
search()
setwd("~/coursera/RProgram/Assignment2/ProgrammingAssignment2")
?matrix
x <- matrix(1:4,2,2)
x
t <- solve(x)
t
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setInv <- function(solve) Inv <<- solve
getInv <- function() Inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
cacheSolve(x)
cacheSolve <- function(x, ...) {
Inv <- getInv(x)
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
cacheSolve(x)
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
makeCacheMatrix(x)
cacheSolve(x)
?$
z <- c(1:10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(z)
cacheSolve <- function(x, ...) {
Inv <- x$getInv()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(z)
cachemean(z,...)
list <- makeVector(z)
cachemean(list)
cachemean(list2)
list <- makeCacheMatrix(x)
cacheSolve(list)
